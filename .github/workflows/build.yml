name: 'Build'
on:
  push:
    branches: [ master ]  
    tags:
      - 'v*'
      - 'beta-v*'

jobs:
  changelog:
    runs-on: ubuntu-latest
    steps:
      - name: "Generate release changelog"
        id: step_create_github_changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 
      - id: step_changelog
        run: |
          CHANGELOG=$(cat << EOF
          ${{ steps.step_create_github_changelog.outputs.changelog }}
          EOF
          )
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Make_GitHub_Release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: changelog
#    outputs:
#      upload_url: ${{ steps.create_release.outputs.upload_url }}
#      upload_url: ${{ steps.step_upload_url.outputs.upload_url }}
    steps:
    - name: Create Release For Tag
      id: create_release
#      uses: actions/create-release@v1
      uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
#        tag_name: latest
        tag: latest
#        release_name: Development Build
        name: Development Build
#        tag_name: ${{ github.ref }}
#        release_name: Release ${{ github.ref }}
#        body: ${{ needs.changelog.outputs.changelog }}
        body: ${{ needs.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: true
#        prerelease: ${{ contains(github.ref, 'beta') }}
        allowUpdates: true
#    - name: to base64
#      run: |
#          UPLOAD_URL_BASE64=`echo -n $(cat ${{ steps.create_release.outputs.upload_url }}) | base64 -w 0`
#          echo -n "UPLOAD_URL=$UPLOAD_URL_BASE64" >> $GITHUB_ENV
    - id: step_upload_url
#      run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"
#      run: echo "UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}" >> "$GITHUB_OUTPUT"
      run: |
          UPLOAD_URL_BASE64=`echo -n "${{ steps.create_release.outputs.upload_url }}" | base64 -w 0`
          echo -n "UPLOAD_URL_BASE64=$UPLOAD_URL_BASE64" >> $GITHUB_OUTPUT
#          echo -n "UPLOAD_URL_BASE64=$UPLOAD_URL_BASE64"
          echo -n "${{ steps.create_release.outputs.upload_url }}"
#      run: |
#          UPLOAD_URL=$(cat << EOF
#          ${{ steps.create_release.outputs.upload_url }}
#          EOF
#          )
#          echo "UPLOAD_URL<<EOF" >> $GITHUB_OUTPUT
#          echo "$UPLOAD_URL" >> $GITHUB_OUTPUT
#          echo "EOF" >> $GITHUB_OUTPUT
#    - name: check_url
#      run: echo "${{ needs.Make_GitHub_Release.outputs.UPLOAD_URL }}"

  build:
    name: Build Executables
#    needs: create_release
    runs-on: ${{ matrix.os }}
    needs: Make_GitHub_Release
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            PRE_BUILD_CMD: >
              sudo apt install -y portaudio19-dev &&
              wget https://github.com/sccn/liblsl/releases/download/v1.16.0/liblsl-1.16.0-jammy_amd64.deb &&
              sudo dpkg -i liblsl-1.16.0-jammy_amd64.deb &&
              pip install wheel &&
              python setup.py bdist_wheel &&
              pip install -r requirements_linux.txt &&
              pip uninstall -y -r requirements_uninstall_linux.txt
            BUILD_CMD: pyinstaller timeflux_neurofeedback_inverse_gamepad_onefile.spec
            OUT_FILE_NAME: timeflux_neurofeedback_inverse_gamepad
            ASSET_MIME: application/octet-stream
          - os: macos-latest
            PRE_BUILD_CMD: >
              brew install portaudio &&
              wget https://github.com/sccn/liblsl/releases/download/v1.16.0/liblsl-1.16.0-OSX_amd64.tar.bz2 &&
              mkdir /Users/runner/liblsl &&
              tar -xf liblsl-1.16.0-OSX_amd64.tar.bz2 -C /Users/runner/liblsl &&
              pip install wheel &&
              python setup.py bdist_wheel &&
              pip install -r requirements_macos.txt &&
              pip uninstall -y -r requirements_uninstall_macos.txt
#            BUILD_CMD: pyinstaller timeflux_neurofeedback_inverse_gamepad.spec
#            POST_BUILD_CMD: >
#              cd dist/ &&
#              ls -Rls &&
#              zip -r9 timeflux_neurofeedback_inverse_gamepad timeflux_neurofeedback_inverse_gamepad
#            OUT_FILE_NAME: timeflux_neurofeedback_inverse_gamepad.zip
#            ASSET_MIME: application/zip
            BUILD_CMD: pyinstaller timeflux_neurofeedback_inverse_gamepad_onefile.spec
            OUT_FILE_NAME: timeflux_neurofeedback_inverse_gamepad
            ASSET_MIME: application/octet-stream
          - os: windows-latest
            PRE_BUILD_CMD: >
              pip install wheel &&
              python setup.py bdist_wheel &&
              pip install -r requirements_windows.txt &&
              pip uninstall -y -r requirements_uninstall_windows.txt
            BUILD_CMD: pyinstaller timeflux_neurofeedback_inverse_gamepad_onefile.spec
            OUT_FILE_NAME: timeflux_neurofeedback_inverse_gamepad.exe.notanexecutable
            ASSET_MIME: application/vnd.microsoft.portable-executable
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9.13'
#      - name: Install dependencies for ${{ matrix.os }}
#        run: |
#          python -m pip install --upgrade pip wheel setuptools
#          #pip install -r requirements.txt
#          pip install pyinstaller
#          #pip uninstall -r -y requirements.txt
#      - name: Pre-Build for ${{ matrix.os }}
#        if: ${{ matrix.PRE_BUILD_CMD != '' }}
#        run: ${{ matrix.PRE_BUILD_CMD }}
#      - name: Build with pyinstaller for ${{ matrix.os }}
#        run: ${{ matrix.BUILD_CMD }}
#      - name: Post-Build for ${{ matrix.os }}
#        if: ${{ matrix.POST_BUILD_CMD != '' }}
#        run: ${{ matrix.POST_BUILD_CMD }}
#      - name: Upload Artifact for ItchIO Uploader
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{runner.os}}
#          path: ./dist/${{ matrix.OUT_FILE_NAME }}
      - name: from base64
        run: |
          UPLOAD_URL=`echo -n ${{needs.Make_GitHub_Release.outputs.UPLOAD_URL_BASE64}} | base64 --decode`
          echo -n "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV
      - name: check_url
#        run: echo "${{ needs.Make_GitHub_Release.outputs.UPLOAD_URL }}"
        run: echo "${{ env.UPLOAD_URL }}"
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
#          upload_url: ${{ needs.create_release.outputs.upload_url }}
#          upload_url: ${{ needs.Make_GitHub_Release.outputs.upload_url }}
#          upload_url: "https://uploads.github.com/repos/neuroidss/timeflux_neurofeedback_inverse_gamepad/releases/89082576/assets{?name,label}"
#          upload_url: ${{ needs.Make_GitHub_Release.outputs.UPLOAD_URL }}
          upload_url: ${{ env.UPLOAD_URL }}
#          upload_url: ${{ env.upload_url }}
#          asset_name: '${{runner.os}}-${{matrix.OUT_FILE_NAME}}'
#          asset_path: './dist/${{matrix.OUT_FILE_NAME}}'
#          asset_content_type: ${{ matrix.ASSET_MIME }}
          asset_name: '${{runner.os}}-LICENSE'
          asset_path: './LICENSE'
          asset_content_type: text/plain
#  purge_release_if_failed:
#    name: Delete release if build failed
#    needs: build
#    runs-on: ubuntu-latest
#    if: ${{ failure() || cancelled() }}
#    steps:
#    - uses: dev-drprasad/delete-tag-and-release@v0.2.0
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        delete_release: true
#        tag_name: ${{ github.ref_name }}

#  release_itchio:
#    name: Release on itch.io
#    needs: build
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: true
#      matrix:
#        include:
#          - channel: Linux
#            OUT_FILE_NAME: timeflux_neurofeedback_inverse_gamepad
#          - channel: macOS
#            OUT_FILE_NAME: timeflux_neurofeedback_inverse_gamepad.zip
#          - channel: Windows
#            OUT_FILE_NAME: timeflux_neurofeedback_inverse_gamepad.exe
#    steps:
#      - name: Downloading Artifacts for ${{ matrix.channel }}
#        uses: actions/download-artifact@v3
#        with:
#          name: ${{matrix.channel}}
#          path: './'
#      - name: Display downloaded files for ${{ matrix.channel }}
#        run: ls -R
#        working-directory: ./
#      - name: Upload ${{ matrix.channel }} to itch.io project
#        uses: josephbmanley/butler-publish-itchio-action@master
#        env:
#          BUTLER_CREDENTIALS: ${{ secrets.ITCHIO_API_KEY }}
#          CHANNEL: ${{ matrix.channel }}
#          ITCH_GAME: swish-and-frick
#          ITCH_USER: daanbreur
#          PACKAGE: './${{matrix.OUT_FILE_NAME}}'
#          VERSION: ${{ github.ref_name }}
