graphs:

  # The publish/subscribe broker graph
  - id: PubSubBroker
    nodes:
    # Allow communication between graphs
    - id: Broker
      module: timeflux.nodes.zmq
      class: Broker
#      class: BrokerLVC

  # The main processing graph
  - id: AcquireEEG
    nodes:
#    - id: random
#      module: timeflux.nodes.random
#      class: Random
#      params:
#        columns: 2
#        seed: 1
#    - id: acquire0
#      module: timeflux_neurofeedback_inverse_gamepad.nodes.hdf5
#      module: timeflux.nodes.hdf5
#      class: Replay
#      params:
#        filename: /tmp/20221217-195349.hdf5
#        keys:
#          - /eeg/raw
#          - Fp1
#        keys: [ Fp1, AF3 ]
#        resync: False
    - id: replay
      module: timeflux_neurofeedback_inverse_gamepad.nodes.bdf
      class: Replay
      params:
        filename: eeg/PAC_IMtest.bdf
        keys: [ eeg ]
        resync: False
#        keys: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
#        keys: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
#        board: freeeeg32
#        channels: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
        #serial_port: /dev/cu.usbmodem3067384E33301 # USB
#        serial_port: /dev/cu.SLAB_USBtoUART # Optical
#        serial_port: /dev/ttyACM0

#    - id: acquire
#      module: timeflux_brainflow.nodes.driver
#      class: BrainFlow
#      params:
#        board: freeeeg32
#        channels: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
        #serial_port: /dev/cu.usbmodem3067384E33301 # USB
#        serial_port: /dev/cu.SLAB_USBtoUART # Optical
#        serial_port: /dev/ttyS20
#        serial_port: /dev/ttyACM0
#        debug: true
        
    - id: dejitter
      module: timeflux.nodes.dejitter
      class: Interpolate
      params:
#        rate: 200
#        rate: 64
        rate: 512
    - id: LocQuery
      module: timeflux.nodes.query
      class: LocQuery
      params:
#        key: [ Oz ]
#        key: [ C3, Cz, C4, O1, Oz, O2 ]
        key: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
#        key: [ AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
        axis: 1
        

    # Receive EEG signal from the network
#    - id: acquire
#    - id: LSL
#      module: timeflux.nodes.lsl
#      class: Receive
#      params:
#        prop: name
#        value: openvibeSignal
#        unit: s
#        sync: network
#        prop: name
#        value: EEG
#        prop: type
#        value: random
#        unit: ns
#        sync: None
#        name: EEG
#        name: signal
#        channels: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
    - id: RenameColumns
      module: timeflux.nodes.axis
      class: RenameColumns
      params:
        names: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
    # Publish the raw EEG signal
    - id: PublisherRaw
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: raw
    # Connect nodes
    edges:
#      - source: random
#      - source: acquire
#      - source: LSL
#        target: RenameColumns
#      - source: RenameColumns
      - source: replay:eeg
        target: LocQuery
      - source: LocQuery
#        target: dejitter
#      - source: dejitter
#      - source: LSL
        target: PublisherRaw
    # Run this graph 25 times per second
#    rate: 3
#    rate: 10
    rate: 24
#    rate: 512
#    rate: 64
#    rate: 25

#  - id: AcquireGamepad
#    nodes:
#    - id: acquireInputDevice
#      module: timeflux_neurofeedback_inverse_gamepad.nodes.gamepad
#      class: InputDevice
#    - id: PublisherInputDevice
#      module: timeflux.nodes.zmq
#      class: Pub
#      params:
#        topic: InputDevice
#    edges:
#      - source: acquireInputDevice
#        target: PublisherInputDevice
#    rate: 10

  - id: StreamToBrowser
    nodes:
    # Receive data streams from the broker
    - id: Subscriber
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics:
#        topics: [ raw, bands ]
#        - bdf
        - raw
#        - highpass1hz
#        - alpha
#        - beta
#        - alpha_beta_abs_avg
#        - bands
#        - iirfilter
#        - gamepad
        - delta_coherence
        - theta_coherence
        - alpha_coherence
        - beta_coherence
        - gamma_coherence
        - averaging
#        - InputDevice
    - id: monitor
      module: timeflux_ui.nodes.ui
      class: UI
    edges:
      - source: Subscriber:delta_coherence
        target: monitor:eeg_delta_coherence
      - source: Subscriber:theta_coherence
        target: monitor:eeg_theta_coherence
      - source: Subscriber:alpha_coherence
        target: monitor:eeg_alpha_coherence
      - source: Subscriber:beta_coherence
        target: monitor:eeg_beta_coherence
      - source: Subscriber:gamma_coherence
        target: monitor:eeg_gamma_coherence
      - source: Subscriber:averaging
        target: monitor:eeg_averaging
#      - source: Subscriber:gamepad
#        target: monitor:eeg_gamepad
#      - source: Subscriber:bdf
#        target: monitor:eeg_bdf
#      - source: Subscriber:bands
#        target: Recorder:eeg_bands
#      - source: Subscriber:iirfilter
#        target: Recorder:eeg_iirfilter
      - source: Subscriber:raw
        target: monitor:eeg_raw
#      - source: Subscriber:highpass1hz
#        target: monitor:eeg_highpass1hz
#      - source: Subscriber:alpha
#        target: monitor:eeg_alpha
#      - source: Subscriber:beta
#        target: monitor:eeg_beta
#      - source: Subscriber:alpha_beta_abs_avg
#        target: monitor:eeg_alpha_beta_abs_avg
#      - source: Subscriber:InputDevice
#        target: monitor:gamepad_InputDevice
#      - source: Subscriber:bands
#        target: monitor:eeg_bands
#      - source: Subscriber:iirfilter
#        target: monitor:eeg_iirfilter
    # Update file every second
#    rate: 1
#    rate: 64
#    rate: 512
#    rate: 3
    rate: 24
#    rate: 10

  # The recorder graph
  - id: ProcessToCircle
    nodes:
    # Receive data streams from the broker
    - id: Subscriber
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics:
#        topics: [ raw, bands ]
        - raw
    - id: CoherenceWindow
      module: timeflux.nodes.window
      class: Window
      params:
#        length: 1.0
        length: 30
#        length: 0.625
        step: 0.1
#        step: 0.002
    - id: DeltaCoherence
      module: timeflux_neurofeedback_inverse_gamepad.nodes.coherence
      class: SpectralConnectivityEpochs
      params:
#        ch_names_pick: ['C3','C4','Cz']
        ch_names_pick: ['Fp1','AF3','F7','F3','FC1','FC5','T7','C3','CP1','CP5','P7','P3','Pz','PO3','O1','Oz','O2','PO4','P4','P8','CP6','CP2','C4','T8','FC6','FC2','F4','F8','AF4','Fp2','Fz','Cz']
#        epochs_con: 10
        epochs_con: 1
#        method: plv
#        method: ciplv
        method: coh
        fmin: 1
        fmax: 3
        n_jobs: 1
        duration: 30
#        duration: 0.625
        overlap: 0.525
        sfreq: 512
#        to_screen: False
        to_screen: True
        xsize: 200
        ysize: 200
        con_name: "DeltaCoherence"
    - id: PublisherDeltaCoherence
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: delta_coherence
    - id: ThetaCoherence
      module: timeflux_neurofeedback_inverse_gamepad.nodes.coherence
      class: SpectralConnectivityEpochs
      params:
#        ch_names_pick: ['C3','C4','Cz']
        ch_names_pick: ['Fp1','AF3','F7','F3','FC1','FC5','T7','C3','CP1','CP5','P7','P3','Pz','PO3','O1','Oz','O2','PO4','P4','P8','CP6','CP2','C4','T8','FC6','FC2','F4','F8','AF4','Fp2','Fz','Cz']
#        epochs_con: 10
        epochs_con: 1
#        method: plv
#        method: ciplv
        method: coh
        fmin: 4
        fmax: 7
        n_jobs: 1
        duration: 30
#        duration: 0.625
        overlap: 0.525
        sfreq: 512
#        to_screen: False
        to_screen: True
        xsize: 200
        ysize: 200
        con_name: "ThetaCoherence"
    - id: PublisherThetaCoherence
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: theta_coherence
    - id: AlphaCoherence
      module: timeflux_neurofeedback_inverse_gamepad.nodes.coherence
      class: SpectralConnectivityEpochs
      params:
#        ch_names_pick: ['C3','C4','Cz']
        ch_names_pick: ['Fp1','AF3','F7','F3','FC1','FC5','T7','C3','CP1','CP5','P7','P3','Pz','PO3','O1','Oz','O2','PO4','P4','P8','CP6','CP2','C4','T8','FC6','FC2','F4','F8','AF4','Fp2','Fz','Cz']
#        epochs_con: 10
        epochs_con: 1
#        method: plv
#        method: ciplv
        method: coh
        fmin: 8
        fmax: 12
        n_jobs: 1
        duration: 30
#        duration: 0.625
        overlap: 0.525
        sfreq: 512
#        to_screen: False
        to_screen: True
        xsize: 400
        ysize: 400
        con_name: "AlphaCoherence"
        triangle: False
    - id: PublisherAlphaCoherence
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: alpha_coherence
    - id: BetaCoherence
      module: timeflux_neurofeedback_inverse_gamepad.nodes.coherence
      class: SpectralConnectivityEpochs
      params:
#        ch_names_pick: ['C3','C4','Cz']
        ch_names_pick: ['Fp1','AF3','F7','F3','FC1','FC5','T7','C3','CP1','CP5','P7','P3','Pz','PO3','O1','Oz','O2','PO4','P4','P8','CP6','CP2','C4','T8','FC6','FC2','F4','F8','AF4','Fp2','Fz','Cz']
#        epochs_con: 10
        epochs_con: 1
#        method: plv
#        method: ciplv
        method: coh
        fmin: 13
        fmax: 28
        n_jobs: 1
        duration: 30
#        duration: 0.625
        overlap: 0.525
        sfreq: 512
#        to_screen: False
        to_screen: True
        xsize: 200
        ysize: 200
        con_name: "BetaCoherence"
    - id: PublisherBetaCoherence
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: beta_coherence
    - id: GammaCoherence
      module: timeflux_neurofeedback_inverse_gamepad.nodes.coherence
      class: SpectralConnectivityEpochs
      params:
#        ch_names_pick: ['C3','C4','Cz']
        ch_names_pick: ['Fp1','AF3','F7','F3','FC1','FC5','T7','C3','CP1','CP5','P7','P3','Pz','PO3','O1','Oz','O2','PO4','P4','P8','CP6','CP2','C4','T8','FC6','FC2','F4','F8','AF4','Fp2','Fz','Cz']
#        epochs_con: 10
        epochs_con: 1
#        method: plv
#        method: ciplv
        method: coh
        fmin: 29
        fmax: 45
        n_jobs: 1
        duration: 30
#        duration: 0.625
        overlap: 0.525
        sfreq: 512
#        to_screen: False
        to_screen: True
        xsize: 200
        ysize: 200
        con_name: "GammaCoherence"
    - id: PublisherGammaCoherence
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: gamma_coherence
    - id: dejitter
      module: timeflux.nodes.dejitter
      class: Interpolate
      params:
#        rate: 200
#        rate: 64
        rate: 512
    # Connect nodes
    edges:
#      - source: acquire
      - source: Subscriber:raw
        target: dejitter
      - source: dejitter
        target: CoherenceWindow
      - source: CoherenceWindow
        target: DeltaCoherence
      - source: DeltaCoherence
        target: PublisherDeltaCoherence
      - source: CoherenceWindow
        target: ThetaCoherence
      - source: ThetaCoherence
        target: PublisherThetaCoherence
      - source: CoherenceWindow
        target: AlphaCoherence
      - source: AlphaCoherence
        target: PublisherAlphaCoherence
      - source: CoherenceWindow
        target: BetaCoherence
      - source: BetaCoherence
        target: PublisherBetaCoherence
      - source: CoherenceWindow
        target: GammaCoherence
      - source: GammaCoherence
        target: PublisherGammaCoherence
    rate: 24
#    rate: 10


  # The recorder graph
  - id: ProcessToAveraging
    nodes:
    # Receive data streams from the broker
    - id: Subscriber
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics:
#        topics: [ raw, bands ]
#        - bdf
        - delta_coherence
        - theta_coherence
        - alpha_coherence
        - beta_coherence
        - gamma_coherence
    - id: AveragingLocQueryPre
      module: timeflux.nodes.query
      class: LocQuery
      params:
        key: [ Fp1__Fp2, Fp1__F8, Fp1__F4, F7__Fp2, F7__F8, F7__F4, F3__Fp2, F3__F8, F3__F4, C3__C4, C3__P4, C3__T8, P3__C4, P3__P4, P3__T8, T7__C4, T7__P4, T7__T8, Fp1__Pz, Fp2__Pz, F3__Pz, F4__Pz, F7__Pz, F8__Pz, Fz__Pz, Fp1__P3, Fp2__P3, F3__P3, F4__P3, F7__P3, F8__P3, Fz__P3, Fp1__P4, Fp2__P4, F3__P4, F4__P4, F7__P4, F8__P4, Fz__P4, Fp1__O1, Fp2__O1, F3__O1, F4__O1, F7__O1, F8__O1, Fz__O1, Fp1__O2, Fp2__O2, F3__O2, F4__O2, F7__O2, F8__O2, Fz__O2 ]
        axis: 1
    - id: AveragingExpressionAlphaFrontalLeftToRigth
      module: timeflux.nodes.expression
      class: Expression
      params:
        expr: AlphaFrontalLeftToRigth = (Fp1__Fp2 + Fp1__F8 + Fp1__F4 + F7__Fp2 + F7__F8 + F7__F4 + F3__Fp2 + F3__F8 + F3__F4) / 9
        eval_on: columns
    - id: AveragingExpressionAlphaParietalLeftToRigth
      module: timeflux.nodes.expression
      class: Expression
      params:
        expr: AlphaParietalLeftToRigth = (C3__C4 + C3__P4 + C3__T8 + P3__C4 + P3__P4 + P3__T8 + T7__C4 + T7__P4 + T7__T8) / 9
        eval_on: columns
    - id: AveragingExpressionAlphaFrontToBack_0
      module: timeflux.nodes.expression
      class: Expression
      params:
        expr: AlphaFrontToBack_0 = (Fp1__Pz + Fp2__Pz + F3__Pz + F4__Pz + F7__Pz + F8__Pz + Fz__Pz + Fp1__P3 + Fp2__P3 + F3__P3 + F4__P3 + F7__P3 + F8__P3 + Fz__P3 + Fp1__P4 + Fp2__P4 + F3__P4 + F4__P4) / 18
        eval_on: columns
    - id: AveragingExpressionAlphaFrontToBack_1
      module: timeflux.nodes.expression
      class: Expression
      params:
        expr: AlphaFrontToBack_1 = (F7__P4 + F8__P4 + Fz__P4 + Fp1__O1 + Fp2__O1 + F3__O1 + F4__O1 + F7__O1 + F8__O1 + Fz__O1 + Fp1__O2 + Fp2__O2 + F3__O2 + F4__O2 + F7__O2 + F8__O2 + Fz__O2) / 17
        eval_on: columns
    - id: AveragingExpressionAlphaFrontToBack
      module: timeflux.nodes.expression
      class: Expression
      params:
        expr: AlphaFrontToBack = (AlphaFrontToBack_0 + AlphaFrontToBack_1) / 2
        eval_on: columns
    - id: AveragingLocQueryPost
      module: timeflux.nodes.query
      class: LocQuery
      params:
#        key: [ B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, XR, YR, ZR, X, Y, Z ]
#        key: [ AlphaFrontalLeftToRigth]
        key: [ AlphaFrontalLeftToRigth, AlphaParietalLeftToRigth, AlphaFrontToBack ]
#        key: [ C3, Cz, C4, O1, Oz, O2 ]
#        key: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
        axis: 1
    - id: PublisherAveragingExpression
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: averaging
    edges:
      - source: Subscriber:alpha_coherence
        target: AveragingLocQueryPre
      - source: AveragingLocQueryPre
        target: AveragingExpressionAlphaFrontalLeftToRigth
      - source: AveragingExpressionAlphaFrontalLeftToRigth
        target: AveragingExpressionAlphaParietalLeftToRigth
      - source: AveragingExpressionAlphaParietalLeftToRigth
        target: AveragingExpressionAlphaFrontToBack_0
      - source: AveragingExpressionAlphaFrontToBack_0
        target: AveragingExpressionAlphaFrontToBack_1
      - source: AveragingExpressionAlphaFrontToBack_1
        target: AveragingExpressionAlphaFrontToBack
      - source: AveragingExpressionAlphaFrontToBack
        target: AveragingLocQueryPost
      - source: AveragingLocQueryPost
        target: PublisherAveragingExpression

