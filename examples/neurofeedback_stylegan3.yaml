graphs:

  # The publish/subscribe broker graph
  - id: PubSubBroker
    nodes:
    # Allow communication between graphs
    - id: Broker
      module: timeflux.nodes.zmq
      class: Broker
#      class: BrokerLVC

  # The main processing graph
  - id: AcquireEEG
    nodes:
#    - id: random
#      module: timeflux.nodes.random
#      class: Random
#      params:
#        columns: 2
#        seed: 1
#    - id: acquire0
#      module: timeflux_neurofeedback_inverse_gamepad.nodes.hdf5
#      module: timeflux.nodes.hdf5
#      class: Replay
#      params:
#        filename: /tmp/20221217-195349.hdf5
#        keys:
#          - /eeg/raw
#          - Fp1
#        keys: [ Fp1, AF3 ]
#        resync: False
#    - id: replay
#      module: timeflux_neurofeedback_inverse_gamepad.nodes.bdf
#      class: Replay
#      params:
#        filename: eeg/PAC_IMtest.bdf
#        keys: [ eeg ]
#        resync: False
#        keys: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
#        keys: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
#        board: freeeeg32
#        channels: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
        #serial_port: /dev/cu.usbmodem3067384E33301 # USB
#        serial_port: /dev/cu.SLAB_USBtoUART # Optical
#        serial_port: /dev/ttyACM0

    - id: acquire
      module: timeflux_brainflow.nodes.driver
      class: BrainFlow
      params:
        board: freeeeg32
        channels: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
#        #serial_port: /dev/cu.usbmodem3067384E33301 # USB
#        serial_port: /dev/cu.SLAB_USBtoUART # Optical
#        serial_port: /dev/ttyS20
        serial_port: /dev/ttyACM0
        debug: true
        
    - id: dejitter
      module: timeflux.nodes.dejitter
      class: Interpolate
      params:
#        rate: 200
#        rate: 64
        rate: 512
    - id: LocQuery
      module: timeflux.nodes.query
      class: LocQuery
      params:
#        key: [ Oz ]
#        key: [ C3, Cz, C4, O1, Oz, O2 ]
        key: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
#        key: [ AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
        axis: 1
        

    # Receive EEG signal from the network
#    - id: acquire
    - id: LSL
      module: timeflux.nodes.lsl
      class: Receive
      params:
        prop: name
        value: openvibeSignal
        unit: s
        sync: network
#        prop: name
#        value: EEG
#        prop: type
#        value: random
#        unit: ns
#        sync: None
#        name: EEG
#        name: signal
        channels: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
    - id: RenameColumns
      module: timeflux.nodes.axis
      class: RenameColumns
      params:
        names: [ Fp1, AF3, F7, F3, FC1, FC5, T7, C3, CP1, CP5, P7, P3, Pz, PO3, O1, Oz, O2, PO4, P4, P8, CP6, CP2, C4, T8, FC6, FC2, F4, F8, AF4, Fp2, Fz, Cz ]
    # Publish the raw EEG signal
    - id: PublisherRaw
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: raw
    # Connect nodes
    edges:
#      - source: random
      - source: acquire
#      - source: replay:eeg
##      - source: LSL
#        target: RenameColumns
#      - source: RenameColumns
#        target: LocQuery
#      - source: LocQuery
#        target: dejitter
#      - source: dejitter
#      - source: replay:eeg
#      - source: LSL
        target: PublisherRaw
    # Run this graph 25 times per second
#    rate: 3
    rate: 10
#    rate: 512
#    rate: 64
#    rate: 25

  - id: AcquireFromGamepad
    nodes:
    - id: acquireInputDevice
      module: timeflux_neurofeedback_inverse_gamepad.nodes.gamepad
      class: InputDevice
    - id: PublisherInputDevice
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: InputDevice
    edges:
      - source: acquireInputDevice
        target: PublisherInputDevice
    rate: 10

  - id: StreamToBrowser
    nodes:
    # Receive data streams from the broker
    - id: Subscriber
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics:
#        topics: [ raw, bands ]
#        - bdf
        - raw
        - highpass1hz
        - alpha
        - beta
        - alpha_beta_abs_avg
#        - bands
#        - iirfilter
        - gamepad
        - coherence
        - InputDevice
    - id: monitor
      module: timeflux_ui.nodes.ui
      class: UI
    edges:
      - source: Subscriber:coherence
        target: monitor:eeg_coherence
      - source: Subscriber:gamepad
        target: monitor:eeg_gamepad
#      - source: Subscriber:bdf
#        target: monitor:eeg_bdf
#      - source: Subscriber:bands
#        target: Recorder:eeg_bands
#      - source: Subscriber:iirfilter
#        target: Recorder:eeg_iirfilter
      - source: Subscriber:raw
        target: monitor:eeg_raw
#      - source: Subscriber:bands
#        target: monitor:eeg_bands
#      - source: Subscriber:iirfilter
#        target: monitor:eeg_iirfilter
    # Update file every second
#    rate: 1
#    rate: 64
#    rate: 512
#    rate: 3
    rate: 10


  # The recorder graph
  - id: StreamToBDF
    nodes:
    # Receive data streams from the broker
    - id: Subscriber
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics:
        - raw
    - id: WriteBDFWindow
      module: timeflux.nodes.window
      class: Window
      params:
#        length: 1.0
        length: 512
#        step: 1.0
        step: 1
#        index: time
        index: sample
#        epochs: true
    # Record to file
    - id: Recorder
      module: timeflux_neurofeedback_inverse_gamepad.nodes.bdf
      class: Save
      params:
        eeg_channels: ['Fp1','AF3','F7','F3','FC1','FC5','T7','C3','CP1','CP5','P7','P3','Pz','PO3','O1','Oz','O2','PO4','P4','P8','CP6','CP2','C4','T8','FC6','FC2','F4','F8','AF4','Fp2','Fz','Cz']
        sample_rate: 512
    edges:
      - source: Subscriber:raw
        target: WriteBDFWindow
#      - source: WriteBDFWindow
#        target: Recorder
    # Update file every second
#    rate: 1
#    rate: 64
#    rate: 512
#    rate: 3
    rate: 10


  # The recorder graph
  - id: ProcessToCircle
    nodes:
    # Receive data streams from the broker
    - id: Subscriber
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics:
#        topics: [ raw, bands ]
        - raw
    - id: CoherenceWindow
      module: timeflux.nodes.window
      class: Window
      params:
#        length: 1.0
        length: 0.625
        step: 0.1
#        step: 0.002
    - id: Coherence
      module: timeflux_neurofeedback_inverse_gamepad.nodes.coherence
      class: SpectralConnectivityEpochs
      params:
#        ch_names_pick: ['C3','C4','Cz']
        ch_names_pick: ['Fp1','AF3','F7','F3','FC1','FC5','T7','C3','CP1','CP5','P7','P3','Pz','PO3','O1','Oz','O2','PO4','P4','P8','CP6','CP2','C4','T8','FC6','FC2','F4','F8','AF4','Fp2','Fz','Cz']
#        epochs_con: 10
        epochs_con: 1
#        method: plv
#        method: ciplv
        method: coh
        fmin: 8
        fmax: 12
        n_jobs: 1
        duration: 0.625
        overlap: 0.525
        sfreq: 512
        to_screen: False
#        to_screen: True
#        vmin: 0
        vmin: 0.7
        con_name:  neurofeedback
        node_colors: null
    - id: PublisherCoherence
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: coherence
    - id: dejitter
      module: timeflux.nodes.dejitter
      class: Interpolate
      params:
#        rate: 200
#        rate: 64
        rate: 512
    # Connect nodes
    edges:
#      - source: acquire
      - source: Subscriber:raw
        target: dejitter
      - source: dejitter
        target: CoherenceWindow
      - source: CoherenceWindow
        target: Coherence
      - source: Coherence
        target: PublisherCoherence
    rate: 10

  # The recorder graph
  - id: ProcessToStyleGAN3
    nodes:
    # Receive data streams from the broker
    - id: Subscriber
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics:
#        topics: [ raw, bands ]
        - raw
        - coherence
    - id: StyleGAN3
      module: timeflux_neurofeedback_inverse_gamepad.nodes.stylegan3
      class: StyleGAN3
      params:
#        to_screen: False
        to_screen: True
        files_path:
          ['1ie1vWw1JNsfrZWRtMvhteqzVz4mt4KGa', 'model/sg2-ada_abstract_network-snapshot-000188.pkl', 'sg2-ada_abstract_network-snapshot-000188','stylegan2-ada']
#          ['1aUrChOhq5jDEddZK1v_Dp1vYNlHSBL9o', 'model/sg2-ada_2020-01-11-skylion-stylegan2-animeportraits-networksnapshot-024664.pkl', 'sg2-ada_2020-01-11-skylion-stylegan2-animeportraits-networksnapshot-024664','stylegan2-ada']
#                ['1UP200H32RIvVYA_9TduGqIbvqfsFjpkg', 'sg3-model/', 'stylegan3-anime-faces-generator_akiyamasho', '.pkl', 'sg3_model'],
#                ['1aMsP1juT3DzZpbEhcNWO_gJVw9lt7Ant', 'sg3-model/', 'stylegan3-r-afhqv2-512x512', '.pkl', 'sg3_model'],
#                ['1Buunx_0kHIWdNWqRq6CBG0ILlAlcPVOb', 'sg3-model/', 'stylegan3-r-ffhq-1024x1024', '.pkl', 'sg3_model'],
#                ['1YiCvVqosdRwta3qwMQHNAzuSRGKnSRp1', 'sg3-model/', 'stylegan3-r-ffhqu-256x256', '.pkl', 'sg3_model'],
#                ['1z42DkzZUFhMpuWFHtMNvD6GApcL1lwG7', 'sg3-model/', 'stylegan3-r-ffhqu-1024x1024', '.pkl', 'sg3_model'],
#                ['1BOln2JzcatBT6LTqbsdmrwVb8GJzvhNa', 'sg3-model/', 'stylegan3-r-metfaces-1024x1024', '.pkl', 'sg3_model'],
#                ['1lh8nIxnX-xmBuu1QQokfFPBvZQPXEo0e', 'sg3-model/', 'stylegan3-r-metfacesu-1024x1024', '.pkl', 'sg3_model'],
#                ['18ZAuZj9fWwbHx07RB8COJsepnOYtyHli', 'sg3-model/', 'stylegan3-t-afhqv2-512x512', '.pkl', 'sg3_model'],
#                ['14OyRIEfpvhKkHooMpCKnzM3cDkOTXr6p', 'sg3-model/', 'stylegan3-t-ffhq-1024x1024', '.pkl', 'sg3_model'],
#                ['1Yb5Cvf2DQ57-hX37gc4dq_Mo2UFMetnw', 'sg3-model/', 'stylegan3-t-ffhqu-256x256', '.pkl', 'sg3_model'],
#                ['1XwObqI_egXDiKXoEaCn83utVEzM7Miln', 'sg3-model/', 'stylegan3-t-ffhqu-1024x1024', '.pkl', 'sg3_model'],
#                ['1DH6C87Xr5wSG5mPZ8Y9GZgymsgBMTzMP', 'sg3-model/', 'stylegan3-t-metfaces-1024x1024', '.pkl', 'sg3_model'],
#                ['11Mn6U-mcJulhSzUetwX1Q03h7EXrZxS_', 'sg3-model/', 'stylegan3-t-metfacesu-1024x1024', '.pkl', 'sg3_model'],
#                ['1Ncs7wUsbfSEPJCcxiTLDOYjLT6UY9wT2', 'sg3-model/', 'sg3_alien-sunglases-256_network-snapshot-000074', '.pkl', 'sg3_model'],
#                ['1CtKjqv7Te5X3L0KuZLIbzi7fbmpLakYS', 'sg3-model/', 'sg3_Benches-512_network-snapshot-011000', '.pkl', 'sg3_model'],
#                ['15LkW8nCsVRrzjjYTVGlUJSnfGDi1RwyI', 'sg3-model/', 'sg3_flowers-256_network-snapshot-000069', '.pkl', 'sg3_model'],
#                ['1RcmJNbWy9As2OMVGiVhMFM0qUKCYB1IK', 'sg3-model/', 'sg3_Landscapes_lhq-256-stylegan3-t-25Mimg', '.pkl', 'sg3_model'],
#                ['1iO_T0MvNw59MPAueoqUHKzpoh40vyLrZ', 'sg3-model/', 'sg3_mechanical-devices-from-the-future-256_network-snapshot-000029', '.pkl', 'sg3_model'],
#                ['1mMZSFynUd_6AIuC8PkDWdeHWY4VyIqYm', 'sg3-model/', 'sg3_scifi-city-256_network-snapshot-000210', '.pkl', 'sg3_model'],
#                ['14DpmYfsX3K9JhkS0BV5YtgZ71wJOInsd', 'sg3-model/', 'sg3_scifi-spaceship-256_network-snapshot-000162', '.pkl', 'sg3_model'],
#                ['13Q5bDnng7VfqYq6g-t8jVybR-E_Df_q3', 'sg3-model/', 'sg3_wikiart-1024-stylegan3-t-17.2Mimg', '.pkl', 'sg3_model'],
#                ['10Q6npsBKdRWMb0LxZUzN6FBSNeB4KTA6', 'sg3-model/', 'sg3_yellow-alien-512_network-snapshot-000236', '.pkl', 'sg3_model'],
#                ['10l7ADbHmZgjSrrpNzOD8r5grJqwxfRd3', 'sg3-model/', 'stylegan3_sneaksnap', '.pkl', 'sg3_model']
    # Connect nodes
    edges:
#      - source: acquire
      - source: Subscriber:coherence
        target: StyleGAN3
    rate: 10


